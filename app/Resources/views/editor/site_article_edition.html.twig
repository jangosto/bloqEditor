{% extends "editor/layout.html.twig" %}

{% import "BloqMultimediaBundle::macros/multimedia_form.html.twig" as multimediaForm %}
{% import "BloqEditorBundle::macros/component_form.html.twig" as componentForm %}

{% block bodyId %}articulos{% endblock %}

{% block siteActionHeader %}
<span class="col-12 pad">
    <h1 class="titulo cuerpo tam38 rojo-500">Edición de Artículo</h1>
</span>
{% endblock %}

{% block siteActionContent %}
<form class="col-12 clear" action="{{ path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')) }}" {{ form_enctype(form) }} method="POST">
    <span class="col-12 pad">
        {{ form_label(form.title, "Título del Artículo") }}
        {{ form_errors(form.title) }}
        {{ form_widget(form.title, { 'attr': { 'class': 'texto grande' } }) }}
    </span>
    <span class="col-6 pad">
        {{ form_label(form.pretitle, "Antetítulo") }}
        {{ form_errors(form.pretitle) }}
        {{ form_widget(form.pretitle, { 'attr': { 'class': 'texto' } }) }}
        <label for="" class="check">{{ form_widget(form.seoTitle) }}Usar antetítulo SEO</label>

        {% for subtitle in form.subtitles %}
        {{ form_label(subtitle, "Subtítulo "~loop.index) }}
        {{ form_errors(subtitle) }}
        {{ form_widget(subtitle, { 'attr': { 'class': 'texto' } }) }}
        {% endfor %}

        {{ form_label(form.intro, "Entradilla") }}
        {{ form_errors(form.intro) }}
        {{ form_widget(form.intro, { 'attr': { 'rows': '3' } }) }}

        {{ form_label(form.text, "Texto del Artículo") }}
        {{ form_widget(form.text, { 'attr': { 'class': 'tinymce', 'rows': '30' } }) }}
        {{ tinymce_init() }}

        <legend class="titulo tam24 cuerpo rojo-500">Sumarios</legend>
        <ul class="summaries" data-prototype="{{ include('BloqEditorBundle:prototypes:summary_form_prototype.html.twig', { 'form': form.summaries.vars.prototype })|e }}">
        {% for summary in form.summaries %}
            <li id="summary_element_{{ summary.vars.name }}" data-index="{{ summary.vars.name }}">{{ componentForm.existingSummaryForm(summary) }}</li>
        {% endfor %}
        </ul>

        <script>
            var $summariesCollectionHolder;

            var $addSummaryButton = $('<button class="add_summary boton negro">Añadir Sumario</button>');
            var $newSummaryLi = $('<li></li>').append($addSummaryButton);

            jQuery(document).ready(function() {
                // Get the ul that holds the collection of tags
                $summariesCollectionHolder = $('ul.summaries');

                $summariesCollectionHolder.find('li').each(function() {
                    addElementFormDeleteLink($(this));
                });

                // add the "add a tag" anchor and li to the tags ul
                $summariesCollectionHolder.append($newSummaryLi);

                // count the current form inputs we have (e.g. 2), use that as the new
                // index when inserting a new item (e.g. 2)
                $summariesCollectionHolder.data('index', $summariesCollectionHolder.find(':input').length);

                $addSummaryButton.on('click', function(e) {
                    // prevent the link from creating a "#" on the URL
                    e.preventDefault();

                    // add a new tag form (see next code block)
                    addElementForm($summariesCollectionHolder, $newSummaryLi);
                });
            });
        </script>
    </span>
    <span class="col-3 pad">
        <script>
            var emptyImageInput = '{% spaceless %}{{ multimediaForm.imageInputPrototype() }}{% endspaceless %}';
            var emptyVideoAudioForm = '{% spaceless %}{{ multimediaForm.videoAudioForm(form.multimedias.vars.prototype) }}{% endspaceless %}';
        </script>
        <ul class="multimedias" data-prototype="{{ include('BloqMultimediaBundle:prototypes:multimedia_form_prototype.html.twig', { 'form': form.multimedias.vars.prototype, 'type': 'image' })|e }}">
        {% for multimedia in form.multimedias %}
            <li id="element_{{ multimedia.vars.name }}" data-index="{{ multimedia.vars.name }}">{{ multimediaForm.existingMultimediaForm(multimedia) }}</li>
        {% endfor %}
        </ul>

        <script>
            jQuery(".remove-image").click(function(){
                if (window.confirm("¿Seguro que desea borrar la imagen?")) {
                    var $multimediaElement = jQuery(this).closest('li');
                    var index = $multimediaElement.data('index');
                    $multimediaElement.find(".caja-imagen").replaceWith(emptyImageInput.replace(/__name__/g, index));

                    $multimediaElement.find("input[type='file']").jfilestyle({
                        buttonText: "<span class='icon icon-subir'></span>"
                    });
                }
                return false;
            });

            jQuery("ul.multimedias").on('change', '.type-selector', function(){
                changeMultimediaTypeForm(jQuery(this).closest('li'));
            });

            jQuery("ul.multimedias").on('change', '.position-selector', function(){
                setPrimaryOptionEnabling();
            });

            $('ul.multimedias').on('change', 'input[type=file]', function(e) {
                containerId = jQuery(this).closest('li').attr('id');
                handleFiles(this.files, 975, 548, containerId, 'rectangle');
                handleFiles(this.files, 500, 500, containerId, 'square');
            });

            function setPrimaryOptionEnabling()
            {
                var primaryImageSelected = false;
                var primaryImageId = "";
                jQuery("ul.multimedias li").each(function(){
                    if (jQuery(this).find(".position-selector").val() == "primary") {
                        primaryImageSelected = true;
                        primaryImageId = jQuery(this).find(".position-selector").attr('id');
                    }
                });
                if (primaryImageSelected == true) {
                    jQuery("ul.multimedias li .position-selector").not("ul.multimedias li #"+primaryImageId).each(function(){
                        jQuery(this).find("option[value='primary']").attr('disabled', 'disabled')
                    });
                } else {
                    jQuery("ul.multimedias li").each(function(){
                        if (jQuery(this).find(".type-selector").val() == 'image') {
                            jQuery(this).find(".position-selector option[value='primary']").removeAttr('disabled');
                        } else {
                            jQuery(this).find(".position-selector option[value='primary']").attr('disabled', 'disabled');
                        }
                    });
                }
            }

            function changeMultimediaTypeForm(multimediaElement)
            {
                var multimediaType = multimediaElement.find(".type-selector").val();
                var typeSpecElem = multimediaElement.find('span.type-specific');
                var index = multimediaElement.data('index');

                if (multimediaType == "image" && typeSpecElem.length == 0) {
                    var prototype = $collectionHolder.data('prototype');
                    var newForm = prototype.replace(/__name__/g, index);
                    multimediaElement.html(newForm);
                    multimediaElement.find("input[type='file']").jfilestyle({
                        buttonText: "<span class='icon icon-subir'></span>"
                    });
                } else if ((multimediaType == "video" || multimediaType == "audio") && typeSpecElem.length > 0) {
                    typeSpecElem.replaceWith(emptyVideoAudioForm.replace(/__name__/g, index));
                }
                setPrimaryOptionEnabling();
            }
        </script>

        <script>
            var $multimediasCollectionHolder;

            var $addMultimediaButton = $('<button class="add_multimedia boton negro">Añadir Multimedia</button>');
            var $newMultimediaLi = $('<li></li>').append($addMultimediaButton);

            jQuery(document).ready(function() {
                setPrimaryOptionEnabling();
                // Get the ul that holds the collection of tags
                $multimediasCollectionHolder = $('ul.multimedias');

                $multimediasCollectionHolder.find('li').each(function() {
                    addElementFormDeleteLink($(this));
                });

                // add the "add a tag" anchor and li to the tags ul
                $multimediasCollectionHolder.append($newMultimediaLi);

                // count the current form inputs we have (e.g. 2), use that as the new
                // index when inserting a new item (e.g. 2)
                $multimediasCollectionHolder.data('index', $multimediasCollectionHolder.find(':input').length);

                $addMultimediaButton.on('click', function(e) {
                    // prevent the link from creating a "#" on the URL
                    e.preventDefault();

                    // add a new tag form (see next code block)
                    var $newElementLi = addElementForm($multimediasCollectionHolder, $newMultimediaLi);
                    $newElementLi.find("input[type='file']").jfilestyle({
                        buttonText: "<span class='icon icon-subir'></span>"
                    });
                    setPrimaryOptionEnabling();
                });
            });
        </script>
    </span>
    <span class="col-3 pad">
        <legend class="titulo tam24 cuerpo rojo-500">Etiquetado</legend>
        {{ form_label(form.sectionId, "Sección") }}
        {{ form_errors(form.sectionId) }}
        {{ form_widget(form.sectionId) }}

        <label for="etiquetas">Guardado en:</label>
        <span class="guardado-en">
            <span class="cat" id="categories_selection">
                {% for option in form.categoryIds %}
                <label for="" class="check">{{ form_widget(option) }}{{ option.vars.label }}</label>
                {% endfor %}
            </span>
            <span class="tag">
                {% for option in form.tagIds %}
                <label for="" class="check">{{ form_widget(option) }}{{ option.vars.label }}</label>
                {% endfor %}
            </span>
        </span>

        <legend class="titulo tam24 cuerpo rojo-500">Autor</legend>
        {{ form_label(form.authorId, "Seleccione un autor") }}
        {{ form_errors(form.authorId) }}
        <span class="autor">
            {{ form_widget(form.authorId) }}
        </span>

        <span class="botones">
            {{ form_widget(form.publish, { 'label': "Publicar", 'attr': { 'type': 'submit', class: 'boton azul' } }) }}
            {{ form_widget(form.save, { 'label': "Guardar Borrador", 'attr': { 'type': 'submit', class: 'boton negro' } }) }}
        </span>
    </span>
    {{ form_widget(form._token) }}
</form>
{% endblock %}

{% block bodyJs %}
    {{ parent() }}
    <script src="{{ statics_domain }}/js/smart-crop.js"></script>
    <script>
        function handleFiles(files, width, height, containerId, inputClass){
            if (files.length > 0) {
                var file = files[0];
                if (typeof FileReader !== "undefined" && file.type.indexOf("image") != -1) {
                    var reader = new FileReader();
                    // Note: addEventListener doesn't work in Google Chrome for this event
                    reader.onload = function (evt) {
                        load(evt.target.result, width, height, containerId, inputClass);
                    };
                    reader.readAsDataURL(file);

                    console.log(reader);
                }
            }
        }

        function load(src, width, height, containerId, inputClass){
            img = new Image();
            img.onload = function(){
                analyze(width, height, containerId, inputClass);
            };
            img.src = src;
        }
        function analyze(width, height, containerId, inputClass){
            if(!img) return;
            SmartCrop.crop(img, {
                width: width,
                height: height,
                minScale: 1,
                debug: true
            }, function(result){fixData(result, width, height, containerId, inputClass);});
        }
        function fixData(result, width, height, containerId, inputClass){
            var obj = new Object();
            obj.type = inputClass;
            obj.width = result.topCrop.width;
            obj.height = result.topCrop.height;
            obj.x = result.topCrop.x;
            obj.y = result.topCrop.y;
            var jsonString = JSON.stringify(obj);
            $('#'+containerId+' .'+inputClass).val(jsonString);
        }
        {#function draw(result){
            selectedCrop = result.topCrop;
            $('.crops').empty().append(_.sortBy(result.crops, function(c){return -c.score.total;}).map(function(crop){
                return $('<p>')
                .text('Score: ' + ~~(crop.score.total*10000000) + ', ' + crop.x+'x'+crop.y)
                .hover(function(){
                    drawCrop(crop);
                }, function(){
                    drawCrop(selectedCrop);
                })
                .click(function(){ selectedCrop = crop; drawCrop(selectedCrop); })
                .data('crop', crop);
            }));
            drawCrop(selectedCrop);
            $('#debug').empty().append(result.debugCanvas);
        }
        function drawCrop(crop){
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            ctx.strokeStyle = 'red';
            ctx.lineWidth = 4;
            ctx.strokeRect(crop.x, crop.y, crop.width, crop.height);
        }#}

        function addElementForm($collectionHolder, $newElementLi) {
            // Get the data-prototype explained earlier
            var prototype = $collectionHolder.data('prototype');

            // get the new index
            var index = $collectionHolder.data('index');

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            var newForm = prototype.replace(/__name__/g, index);

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            var $newFormLi = $('<li id="element_'+index+'" data-index="'+index+'"></li>').append(newForm);
            $newElementLi.before($newFormLi);

            addElementFormDeleteLink($newFormLi);

            return $newFormLi;
        }

        function addElementFormDeleteLink($elementFormLi) {
            var $removeFormA = $('<a style="float:left" class="boton cuadrado rojo remove-element" href="#"><span class="icono icon icon-eliminar"></span></a>');
            $elementFormLi.prepend($removeFormA);

            $removeFormA.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // remove the li for the tag form
                $elementFormLi.remove();
            });
        }
    </script>
{% endblock %}
